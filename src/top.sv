//_\TLV_version 1d: tl-x.org, generated by SandPiper(TM) 1.14-2022/10/10-beta-Pro
//_\source top.tlv 41

//_\SV
   // Included URL: "https://raw.githubusercontent.com/efabless/chipcraft---mest-course/main/tlv_lib/calculator_shell_lib.tlv"
   // Include Tiny Tapeout Lab.
   // Included URL: "https://raw.githubusercontent.com/os-fpga/Virtual-FPGA-Lab/35e36bd144fddd75495d4cbc01c4fc50ac5bde6f/tlv_lib/tiny_tapeout_lib.tlv"// Included URL: "https://raw.githubusercontent.com/os-fpga/Virtual-FPGA-Lab/a069f1e4e19adc829b53237b3e0b5d6763dc3194/tlv_lib/fpga_includes.tlv"
//_\source top.tlv 123

//_\SV

// ================================================
// A simple Makerchip Verilog test bench driving random stimulus.
// Modify the module contents to your needs.
// ================================================

module top(input logic clk, input logic reset, input logic [31:0] cyc_cnt, output logic passed, output logic failed);
   // Tiny tapeout I/O signals.
   logic [7:0] ui_in, uo_out;
   
   logic [31:0] r;
   always @(posedge clk) r <= 0;
   assign ui_in = r[7:0];
   
   logic ena = 1'b0;
   logic rst_n = ! reset;

   // Instantiate the Tiny Tapeout module.
   tt_um_template tt(.*);

   assign passed = top.cyc_cnt > 60;
   assign failed = 1'b0;
endmodule


// Provide a wrapper module to debounce input signals if requested.

//_\SV



// =======================
// The Tiny Tapeout module
// =======================

module tt_um_template (
    input  wire [7:0] ui_in,    // Dedicated inputs - connected to the input switches
    output wire [7:0] uo_out,   // Dedicated outputs - connected to the 7 segment display
    /*   // The FPGA is based on TinyTapeout 3 which has no bidirectional I/Os (vs. TT6 for the ASIC).
    input  wire [7:0] uio_in,   // IOs: Bidirectional Input path
    output wire [7:0] uio_out,  // IOs: Bidirectional Output path
    output wire [7:0] uio_oe,   // IOs: Bidirectional Enable path (active high: 0=input, 1=output)
    */
    input  wire       ena,      // will go high when the design is enabled
    input  wire       clk,      // clock
    input  wire       rst_n     // reset_n - low to reset
);
   wire reset = ! rst_n;

// ---------- Generated Code Inlined Here (before 1st \TLV) ----------
// Generated by SandPiper(TM) 1.14-2022/10/10-beta-Pro from Redwood EDA, LLC.
// (Installed here: /usr/local/mono/sandpiper/distro.)
// Redwood EDA, LLC does not claim intellectual property rights to this file and provides no warranty regarding its correctness or quality.


// For silencing unused signal messages.
`define BOGUS_USE(ignore)


genvar digit, input_label, leds, switch;


//
// Signals declared top-level.
//

// For $slideswitch.
logic [7:0] L0_slideswitch_a0;

// For $sseg_decimal_point_n.
logic L0_sseg_decimal_point_n_a0;

// For $sseg_digit_n.
logic [7:0] L0_sseg_digit_n_a0;

// For $sseg_segment_n.
logic [6:0] L0_sseg_segment_n_a0;

// For /fpga_pins/fpga|calc$diff.
logic [7:0] FpgaPins_Fpga_CALC_diff_a1,
            FpgaPins_Fpga_CALC_diff_a2;

// For /fpga_pins/fpga|calc$digit.
logic [3:0] FpgaPins_Fpga_CALC_digit_a3;

// For /fpga_pins/fpga|calc$dummy.
logic FpgaPins_Fpga_CALC_dummy_a0;

// For /fpga_pins/fpga|calc$equals_in.
logic FpgaPins_Fpga_CALC_equals_in_a0,
      FpgaPins_Fpga_CALC_equals_in_a1;

// For /fpga_pins/fpga|calc$mem.
logic [7:0] FpgaPins_Fpga_CALC_mem_a2,
            FpgaPins_Fpga_CALC_mem_a3;

// For /fpga_pins/fpga|calc$op.
logic [2:0] FpgaPins_Fpga_CALC_op_a1,
            FpgaPins_Fpga_CALC_op_a2;

// For /fpga_pins/fpga|calc$out.
logic [7:0] FpgaPins_Fpga_CALC_out_a2,
            FpgaPins_Fpga_CALC_out_a3,
            FpgaPins_Fpga_CALC_out_a4;

// For /fpga_pins/fpga|calc$prod.
logic [7:0] FpgaPins_Fpga_CALC_prod_a1,
            FpgaPins_Fpga_CALC_prod_a2;

// For /fpga_pins/fpga|calc$quot.
logic [7:0] FpgaPins_Fpga_CALC_quot_a1,
            FpgaPins_Fpga_CALC_quot_a2;

// For /fpga_pins/fpga|calc$rand1.
logic [3:0] FpgaPins_Fpga_CALC_rand1_a0;

// For /fpga_pins/fpga|calc$rand2.
logic [3:0] FpgaPins_Fpga_CALC_rand2_a0;

// For /fpga_pins/fpga|calc$reset.
logic FpgaPins_Fpga_CALC_reset_a0,
      FpgaPins_Fpga_CALC_reset_a1,
      FpgaPins_Fpga_CALC_reset_a2;

// For /fpga_pins/fpga|calc$sum.
logic [7:0] FpgaPins_Fpga_CALC_sum_a1,
            FpgaPins_Fpga_CALC_sum_a2;

// For /fpga_pins/fpga|calc$val1.
logic [7:0] FpgaPins_Fpga_CALC_val1_a1,
            FpgaPins_Fpga_CALC_val1_a2;

// For /fpga_pins/fpga|calc$val2.
logic [7:0] FpgaPins_Fpga_CALC_val2_a1,
            FpgaPins_Fpga_CALC_val2_a2;

// For /fpga_pins/fpga|calc$valid.
logic [0:0] FpgaPins_Fpga_CALC_valid_a0,
            FpgaPins_Fpga_CALC_valid_a1,
            FpgaPins_Fpga_CALC_valid_a2;

// For /fpga_pins/fpga|calc$valid_or_reset.
logic FpgaPins_Fpga_CALC_valid_or_reset_a0,
      FpgaPins_Fpga_CALC_valid_or_reset_a1,
      FpgaPins_Fpga_CALC_valid_or_reset_a2;

// For /fpga_pins/fpga|tb$mem.
logic [7:0] FpgaPins_Fpga_TB_mem_a2;

// For /fpga_pins/fpga|tb$op.
logic [2:0] FpgaPins_Fpga_TB_op_a2;

// For /fpga_pins/fpga|tb$out.
logic [7:0] FpgaPins_Fpga_TB_out_a2;

// For /fpga_pins/fpga|tb$val1.
logic [7:0] FpgaPins_Fpga_TB_val1_a2;

// For /fpga_pins/fpga|tb$val2.
logic [7:0] FpgaPins_Fpga_TB_val2_a2;

// For /fpga_pins/fpga|tb$valid.
logic [0:0] FpgaPins_Fpga_TB_valid_a2;

// For /fpga_pins/fpga|tb/default$dummy.
logic FpgaPins_Fpga_TB_Default_dummy_a0;

// For /fpga_pins/fpga|tb/default$mem.
logic [8:0] FpgaPins_Fpga_TB_Default_mem_a0;

// For /fpga_pins/fpga|tb/default$op.
logic [2:0] FpgaPins_Fpga_TB_Default_op_a0,
            FpgaPins_Fpga_TB_Default_op_a1;

// For /fpga_pins/fpga|tb/default$out.
logic [7:0] FpgaPins_Fpga_TB_Default_out_a0;

// For /fpga_pins/fpga|tb/default$rand.
logic [31:0] FpgaPins_Fpga_TB_Default_rand_a0;

// For /fpga_pins/fpga|tb/default$rand1.
logic [3:0] FpgaPins_Fpga_TB_Default_rand1_a0;

// For /fpga_pins/fpga|tb/default$rand2.
logic [3:0] FpgaPins_Fpga_TB_Default_rand2_a0;

// For /fpga_pins/fpga|tb/default$rand_op.
logic [2:0] FpgaPins_Fpga_TB_Default_rand_op_a0;

// For /fpga_pins/fpga|tb/default$val1.
logic [7:0] FpgaPins_Fpga_TB_Default_val1_a0;

// For /fpga_pins/fpga|tb/default$val2.
logic [7:0] FpgaPins_Fpga_TB_Default_val2_a0;

// For /fpga_pins/fpga|tb/default$valid.
logic FpgaPins_Fpga_TB_Default_valid_a0;




   //
   // Scope: /fpga_pins
   //


      //
      // Scope: /fpga
      //


         //
         // Scope: |calc
         //

            // Staging of $diff.
            always_ff @(posedge clk) FpgaPins_Fpga_CALC_diff_a2[7:0] <= FpgaPins_Fpga_CALC_diff_a1[7:0];

            // Staging of $equals_in.
            always_ff @(posedge clk) FpgaPins_Fpga_CALC_equals_in_a1 <= FpgaPins_Fpga_CALC_equals_in_a0;

            // Staging of $mem.
            always_ff @(posedge clk) FpgaPins_Fpga_CALC_mem_a3[7:0] <= FpgaPins_Fpga_CALC_mem_a2[7:0];

            // Staging of $op.
            always_ff @(posedge clk) FpgaPins_Fpga_CALC_op_a2[2:0] <= FpgaPins_Fpga_CALC_op_a1[2:0];

            // Staging of $out.
            always_ff @(posedge clk) FpgaPins_Fpga_CALC_out_a3[7:0] <= FpgaPins_Fpga_CALC_out_a2[7:0];
            always_ff @(posedge clk) FpgaPins_Fpga_CALC_out_a4[7:0] <= FpgaPins_Fpga_CALC_out_a3[7:0];

            // Staging of $prod.
            always_ff @(posedge clk) FpgaPins_Fpga_CALC_prod_a2[7:0] <= FpgaPins_Fpga_CALC_prod_a1[7:0];

            // Staging of $quot.
            always_ff @(posedge clk) FpgaPins_Fpga_CALC_quot_a2[7:0] <= FpgaPins_Fpga_CALC_quot_a1[7:0];

            // Staging of $reset.
            always_ff @(posedge clk) FpgaPins_Fpga_CALC_reset_a1 <= FpgaPins_Fpga_CALC_reset_a0;
            always_ff @(posedge clk) FpgaPins_Fpga_CALC_reset_a2 <= FpgaPins_Fpga_CALC_reset_a1;

            // Staging of $sum.
            always_ff @(posedge clk) FpgaPins_Fpga_CALC_sum_a2[7:0] <= FpgaPins_Fpga_CALC_sum_a1[7:0];

            // Staging of $val1.
            always_ff @(posedge clk) FpgaPins_Fpga_CALC_val1_a2[7:0] <= FpgaPins_Fpga_CALC_val1_a1[7:0];

            // Staging of $val2.
            always_ff @(posedge clk) FpgaPins_Fpga_CALC_val2_a2[7:0] <= FpgaPins_Fpga_CALC_val2_a1[7:0];

            // Staging of $valid.
            always_ff @(posedge clk) FpgaPins_Fpga_CALC_valid_a1[0:0] <= FpgaPins_Fpga_CALC_valid_a0[0:0];
            always_ff @(posedge clk) FpgaPins_Fpga_CALC_valid_a2[0:0] <= FpgaPins_Fpga_CALC_valid_a1[0:0];

            // Staging of $valid_or_reset.
            always_ff @(posedge clk) FpgaPins_Fpga_CALC_valid_or_reset_a1 <= FpgaPins_Fpga_CALC_valid_or_reset_a0;
            always_ff @(posedge clk) FpgaPins_Fpga_CALC_valid_or_reset_a2 <= FpgaPins_Fpga_CALC_valid_or_reset_a1;



         //
         // Scope: |tb
         //


            //
            // Scope: /default
            //

               // Staging of $op.
               always_ff @(posedge clk) FpgaPins_Fpga_TB_Default_op_a1[2:0] <= FpgaPins_Fpga_TB_Default_op_a0[2:0];









//
// Debug Signals
//

   if (1) begin : DEBUG_SIGS_GTKWAVE

      (* keep *) logic [7:0] \@0$slideswitch ;
      assign \@0$slideswitch = L0_slideswitch_a0;
      (* keep *) logic  \@0$sseg_decimal_point_n ;
      assign \@0$sseg_decimal_point_n = L0_sseg_decimal_point_n_a0;
      (* keep *) logic [7:0] \@0$sseg_digit_n ;
      assign \@0$sseg_digit_n = L0_sseg_digit_n_a0;
      (* keep *) logic [6:0] \@0$sseg_segment_n ;
      assign \@0$sseg_segment_n = L0_sseg_segment_n_a0;

      //
      // Scope: /digit[0:0]
      //
      for (digit = 0; digit <= 0; digit++) begin : \/digit 

         //
         // Scope: /leds[7:0]
         //
         for (leds = 0; leds <= 7; leds++) begin : \/leds 
            (* keep *) logic  \//@0$viz_lit ;
            assign \//@0$viz_lit = L1_Digit[digit].L2_Leds[leds].L2_viz_lit_a0;
         end
      end

      //
      // Scope: /fpga_pins
      //
      if (1) begin : \/fpga_pins 

         //
         // Scope: /fpga
         //
         if (1) begin : \/fpga 

            //
            // Scope: |calc
            //
            if (1) begin : P_calc
               (* keep *) logic [7:0] \///?$valid_or_reset@1$diff ;
               assign \///?$valid_or_reset@1$diff = FpgaPins_Fpga_CALC_diff_a1;
               (* keep *) logic [3:0] \///@3$digit ;
               assign \///@3$digit = FpgaPins_Fpga_CALC_digit_a3;
               (* keep *) logic  \///@0$dummy ;
               assign \///@0$dummy = FpgaPins_Fpga_CALC_dummy_a0;
               (* keep *) logic  \///@0$equals_in ;
               assign \///@0$equals_in = FpgaPins_Fpga_CALC_equals_in_a0;
               (* keep *) logic [7:0] \///?$valid_or_reset@2$mem ;
               assign \///?$valid_or_reset@2$mem = FpgaPins_Fpga_CALC_mem_a2;
               (* keep *) logic [2:0] \///@1$op ;
               assign \///@1$op = FpgaPins_Fpga_CALC_op_a1;
               (* keep *) logic [7:0] \///@2$out ;
               assign \///@2$out = FpgaPins_Fpga_CALC_out_a2;
               (* keep *) logic [7:0] \///?$valid_or_reset@1$prod ;
               assign \///?$valid_or_reset@1$prod = FpgaPins_Fpga_CALC_prod_a1;
               (* keep *) logic [7:0] \///?$valid_or_reset@1$quot ;
               assign \///?$valid_or_reset@1$quot = FpgaPins_Fpga_CALC_quot_a1;
               (* keep *) logic [3:0] \///@0$rand1 ;
               assign \///@0$rand1 = FpgaPins_Fpga_CALC_rand1_a0;
               (* keep *) logic [3:0] \///@0$rand2 ;
               assign \///@0$rand2 = FpgaPins_Fpga_CALC_rand2_a0;
               (* keep *) logic  \///@0$reset ;
               assign \///@0$reset = FpgaPins_Fpga_CALC_reset_a0;
               (* keep *) logic [7:0] \///?$valid_or_reset@1$sum ;
               assign \///?$valid_or_reset@1$sum = FpgaPins_Fpga_CALC_sum_a1;
               (* keep *) logic [7:0] \///@1$val1 ;
               assign \///@1$val1 = FpgaPins_Fpga_CALC_val1_a1;
               (* keep *) logic [7:0] \///@1$val2 ;
               assign \///@1$val2 = FpgaPins_Fpga_CALC_val2_a1;
               (* keep *) logic [0:0] \///@0$valid ;
               assign \///@0$valid = FpgaPins_Fpga_CALC_valid_a0;
               (* keep *) logic  \///@0$valid_or_reset ;
               assign \///@0$valid_or_reset = FpgaPins_Fpga_CALC_valid_or_reset_a0;
            end

            //
            // Scope: |tb
            //
            if (1) begin : P_tb
               (* keep *) logic [7:0] \///@2$mem ;
               assign \///@2$mem = FpgaPins_Fpga_TB_mem_a2;
               (* keep *) logic [2:0] \///@2$op ;
               assign \///@2$op = FpgaPins_Fpga_TB_op_a2;
               (* keep *) logic [7:0] \///@2$out ;
               assign \///@2$out = FpgaPins_Fpga_TB_out_a2;
               (* keep *) logic [7:0] \///@2$val1 ;
               assign \///@2$val1 = FpgaPins_Fpga_TB_val1_a2;
               (* keep *) logic [7:0] \///@2$val2 ;
               assign \///@2$val2 = FpgaPins_Fpga_TB_val2_a2;
               (* keep *) logic [0:0] \///@2$valid ;
               assign \///@2$valid = FpgaPins_Fpga_TB_valid_a2;

               //
               // Scope: /default
               //
               if (1) begin : \/default 
                  (* keep *) logic  \////@0$dummy ;
                  assign \////@0$dummy = FpgaPins_Fpga_TB_Default_dummy_a0;
                  (* keep *) logic [8:0] \////@0$mem ;
                  assign \////@0$mem = FpgaPins_Fpga_TB_Default_mem_a0;
                  (* keep *) logic [2:0] \////@0$op ;
                  assign \////@0$op = FpgaPins_Fpga_TB_Default_op_a0;
                  (* keep *) logic [7:0] \////@0$out ;
                  assign \////@0$out = FpgaPins_Fpga_TB_Default_out_a0;
                  (* keep *) logic [31:0] \////@0$rand ;
                  assign \////@0$rand = FpgaPins_Fpga_TB_Default_rand_a0;
                  (* keep *) logic [3:0] \////@0$rand1 ;
                  assign \////@0$rand1 = FpgaPins_Fpga_TB_Default_rand1_a0;
                  (* keep *) logic [3:0] \////@0$rand2 ;
                  assign \////@0$rand2 = FpgaPins_Fpga_TB_Default_rand2_a0;
                  (* keep *) logic [2:0] \////@0$rand_op ;
                  assign \////@0$rand_op = FpgaPins_Fpga_TB_Default_rand_op_a0;
                  (* keep *) logic [7:0] \////@0$val1 ;
                  assign \////@0$val1 = FpgaPins_Fpga_TB_Default_val1_a0;
                  (* keep *) logic [7:0] \////@0$val2 ;
                  assign \////@0$val2 = FpgaPins_Fpga_TB_Default_val2_a0;
                  (* keep *) logic  \////@0$valid ;
                  assign \////@0$valid = FpgaPins_Fpga_TB_Default_valid_a0;
               end
            end
         end
      end

      //
      // Scope: /switch[7:0]
      //
      for (switch = 0; switch <= 7; switch++) begin : \/switch 
         (* keep *) logic  \/@0$viz_switch ;
         assign \/@0$viz_switch = L1_Switch[switch].L1_viz_switch_a0;
      end


   end

// ---------- Generated Code Ends ----------
//_\TLV
   /* verilator lint_off UNOPTFLAT */
   // Connect Tiny Tapeout I/Os to Virtual FPGA Lab.
   //_\source /raw.githubusercontent.com/osfpga/VirtualFPGALab/35e36bd144fddd75495d4cbc01c4fc50ac5bde6f/tlvlib/tinytapeoutlib.tlv 76   // Instantiated from top.tlv, 178 as: m5+tt_connections()
      assign L0_slideswitch_a0[7:0] = ui_in;
      assign L0_sseg_segment_n_a0[6:0] = ~ uo_out[6:0];
      assign L0_sseg_decimal_point_n_a0 = ~ uo_out[7];
      assign L0_sseg_digit_n_a0[7:0] = 8'b11111110;
   //_\end_source

   // Instantiate the Virtual FPGA Lab.
   //_\source /raw.githubusercontent.com/osfpga/VirtualFPGALab/a069f1e4e19adc829b53237b3e0b5d6763dc3194/tlvlib/fpgaincludes.tlv 307   // Instantiated from top.tlv, 181 as: m5+board(/top, /fpga, 7, $, , calc)
      
      //_\source /raw.githubusercontent.com/osfpga/VirtualFPGALab/a069f1e4e19adc829b53237b3e0b5d6763dc3194/tlvlib/fpgaincludes.tlv 355   // Instantiated from /raw.githubusercontent.com/osfpga/VirtualFPGALab/a069f1e4e19adc829b53237b3e0b5d6763dc3194/tlvlib/fpgaincludes.tlv, 309 as: m4+thanks(m5__l(309)m5_eval(m5_get(BOARD_THANKS_ARGS)))
         //_/thanks
            
      //_\end_source
      
   
      // Board VIZ.
   
      // Board Image.
      
      //_/fpga_pins
         
         //_/fpga
            //_\source top.tlv 49   // Instantiated from /raw.githubusercontent.com/osfpga/VirtualFPGALab/a069f1e4e19adc829b53237b3e0b5d6763dc3194/tlvlib/fpgaincludes.tlv, 340 as: m4+calc.
            
               //_|calc
                  //_@0
                     assign FpgaPins_Fpga_CALC_valid_a0[0:0] = (FpgaPins_Fpga_CALC_equals_in_a0 && ~(FpgaPins_Fpga_CALC_equals_in_a1) && ~FpgaPins_Fpga_CALC_reset_a0) ? 1 : 0;
                     assign FpgaPins_Fpga_CALC_valid_or_reset_a0 = FpgaPins_Fpga_CALC_valid_a0 || FpgaPins_Fpga_CALC_reset_a0;
                     assign FpgaPins_Fpga_CALC_reset_a0 = reset;
                     assign FpgaPins_Fpga_CALC_equals_in_a0 = ui_in[7];
                  //_@1
            
                     assign FpgaPins_Fpga_CALC_val1_a1[7:0] = FpgaPins_Fpga_CALC_out_a3;
                     assign FpgaPins_Fpga_CALC_op_a1[2:0] = ui_in[6:4];
                     assign FpgaPins_Fpga_CALC_val2_a1[7:0] = ui_in[3:0];
            
                  //_?$valid_or_reset
                     //_@1
                        assign FpgaPins_Fpga_CALC_sum_a1[7:0] = FpgaPins_Fpga_CALC_val1_a1 + FpgaPins_Fpga_CALC_val2_a1;
                        assign FpgaPins_Fpga_CALC_diff_a1[7:0] = FpgaPins_Fpga_CALC_val1_a1- FpgaPins_Fpga_CALC_val2_a1;
                        assign FpgaPins_Fpga_CALC_prod_a1[7:0] = FpgaPins_Fpga_CALC_val1_a1 * FpgaPins_Fpga_CALC_val2_a1;
                        assign FpgaPins_Fpga_CALC_quot_a1[7:0] = FpgaPins_Fpga_CALC_val1_a1 / FpgaPins_Fpga_CALC_val2_a1;
                     //_@2
                        assign FpgaPins_Fpga_CALC_mem_a2[7:0] = FpgaPins_Fpga_CALC_reset_a2 ? 8'b0 :
                        FpgaPins_Fpga_CALC_valid_a2 && FpgaPins_Fpga_CALC_op_a2[2:0]==3'b101
                           ? FpgaPins_Fpga_CALC_out_a4 :
                        FpgaPins_Fpga_CALC_mem_a3;
            
            
                  //_@2
                     assign FpgaPins_Fpga_CALC_out_a2[7:0] = FpgaPins_Fpga_CALC_reset_a2 ? 8'b0 :
                        ~(FpgaPins_Fpga_CALC_valid_a2)
                           ? FpgaPins_Fpga_CALC_out_a3 :
                        FpgaPins_Fpga_CALC_op_a2[2:0]==3'b000
                           ? FpgaPins_Fpga_CALC_sum_a2[7:0] :
                        FpgaPins_Fpga_CALC_op_a2[2:0]==3'b001
                           ? FpgaPins_Fpga_CALC_diff_a2[7:0] :
                        FpgaPins_Fpga_CALC_op_a2[2:0]==3'b010
                           ? FpgaPins_Fpga_CALC_prod_a2[7:0] :
                        FpgaPins_Fpga_CALC_op_a2[2:0]==3'b011
                           ? FpgaPins_Fpga_CALC_quot_a2[7:0] :
                        FpgaPins_Fpga_CALC_op_a2[2:0]==3'b100
                           ? FpgaPins_Fpga_CALC_mem_a2[7:0] :
                        FpgaPins_Fpga_CALC_op_a2[2:0]==3'b101
                           ? FpgaPins_Fpga_CALC_out_a4 :
                        FpgaPins_Fpga_CALC_op_a2[2:0]==3'b110
                           ? FpgaPins_Fpga_CALC_out_a4 :
                        FpgaPins_Fpga_CALC_out_a4;
                  //_@3
                     assign FpgaPins_Fpga_CALC_digit_a3[3:0] = FpgaPins_Fpga_CALC_out_a4[3:0];
                     assign uo_out = (FpgaPins_Fpga_CALC_digit_a3 == 4'b0000) ? 8'b00111111:
                               (FpgaPins_Fpga_CALC_digit_a3 == 4'b0001) ? 8'b00000110:
                               (FpgaPins_Fpga_CALC_digit_a3 == 4'b0010) ? 8'b01011011:
                               (FpgaPins_Fpga_CALC_digit_a3 == 4'b0011) ? 8'b01001111:
                               (FpgaPins_Fpga_CALC_digit_a3 == 4'b0100) ? 8'b01100110:
                               (FpgaPins_Fpga_CALC_digit_a3 == 4'b0101) ? 8'b01101101:
                               (FpgaPins_Fpga_CALC_digit_a3 == 4'b0110) ? 8'b01111101:
                               (FpgaPins_Fpga_CALC_digit_a3 == 4'b0111) ? 8'b00000111:
                               (FpgaPins_Fpga_CALC_digit_a3 == 4'b1000) ? 8'b01111111:
                               (FpgaPins_Fpga_CALC_digit_a3 == 4'b1001) ? 8'b01101111:
                               (FpgaPins_Fpga_CALC_digit_a3 == 4'b1010) ? 8'b01110111:
                               (FpgaPins_Fpga_CALC_digit_a3 == 4'b1011) ? 8'b01111100:
                               (FpgaPins_Fpga_CALC_digit_a3 == 4'b1100) ? 8'b00111001:
                               (FpgaPins_Fpga_CALC_digit_a3 == 4'b1101) ? 8'b01011110:
                               (FpgaPins_Fpga_CALC_digit_a3 == 4'b1110) ? 8'b01111001:
                               8'b01110001;
            
               // Note that pipesignals assigned here can be found under /fpga_pins/fpga.
            
            
            
               //_\source /raw.githubusercontent.com/efabless/chipcraftmestcourse/main/tlvlib/calculatorshelllib.tlv 4   // Instantiated from top.tlv, 118 as: m5+cal_viz(@2, /fpga)
                  // Only for Makerchip.
                  //_\source /raw.githubusercontent.com/efabless/chipcraftmestcourse/main/tlvlib/calculatorshelllib.tlv 9   // Instantiated from /raw.githubusercontent.com/efabless/chipcraftmestcourse/main/tlvlib/calculatorshelllib.tlv, 6 as: m4+cal_viz_internal.
                     
                     
                     //_|calc
                        //_@0
                           assign {FpgaPins_Fpga_CALC_dummy_a0, FpgaPins_Fpga_CALC_rand1_a0[3:0], FpgaPins_Fpga_CALC_rand2_a0[3:0]} = {FpgaPins_Fpga_TB_Default_dummy_a0, FpgaPins_Fpga_TB_Default_rand1_a0, FpgaPins_Fpga_TB_Default_rand2_a0};
                           `BOGUS_USE(FpgaPins_Fpga_CALC_dummy_a0 FpgaPins_Fpga_CALC_rand2_a0 FpgaPins_Fpga_CALC_rand1_a0)
                     //_|tb
                        //_@0
                           //_/default
                              assign FpgaPins_Fpga_TB_Default_valid_a0 = ! FpgaPins_Fpga_CALC_reset_a0;
                              /*SV_plus*/
                                 always @(posedge clk) FpgaPins_Fpga_TB_Default_rand_a0[31:0] <= $random();
                              assign FpgaPins_Fpga_TB_Default_rand_op_a0[2:0] = FpgaPins_Fpga_TB_Default_rand_a0[2:0];
                              assign FpgaPins_Fpga_TB_Default_rand1_a0[3:0] = FpgaPins_Fpga_TB_Default_rand_a0[6:3];
                              assign FpgaPins_Fpga_TB_Default_rand2_a0[3:0] = FpgaPins_Fpga_TB_Default_rand_a0[10:7];
                              assign FpgaPins_Fpga_TB_Default_op_a0[2:0] = ((top.cyc_cnt % 2) != 0)
                                             ? FpgaPins_Fpga_TB_Default_rand_op_a0[2:0]
                                             //? ( (*top.cyc_cnt > 33) ? ($rand_op[2:0] % 2) :
                                             //    (*top.cyc_cnt > 15) ? $rand_op[2:0] :
                                             //                          ((($rand_op[2:0] % 2) != 0) + ($rand_op[2:0] % 4)) )
                                             : FpgaPins_Fpga_TB_Default_op_a1;
                              assign FpgaPins_Fpga_TB_Default_val1_a0[7:0] = '0;
                              assign FpgaPins_Fpga_TB_Default_val2_a0[7:0] = '0;
                              assign FpgaPins_Fpga_TB_Default_out_a0[7:0] = '0;
                              assign FpgaPins_Fpga_TB_Default_mem_a0[8:0] = 9'h100;   // Indicates to VIZ that there is no memory.
                              assign FpgaPins_Fpga_TB_Default_dummy_a0 = 0;
                              `BOGUS_USE(FpgaPins_Fpga_TB_Default_out_a0 FpgaPins_Fpga_TB_Default_mem_a0 FpgaPins_Fpga_TB_Default_valid_a0 FpgaPins_Fpga_TB_Default_val1_a0 FpgaPins_Fpga_TB_Default_val2_a0 FpgaPins_Fpga_TB_Default_dummy_a0 FpgaPins_Fpga_TB_Default_rand1_a0 FpgaPins_Fpga_TB_Default_rand2_a0)
                        //_@2
                           assign {FpgaPins_Fpga_TB_mem_a2[7:0], FpgaPins_Fpga_TB_op_a2[2:0], FpgaPins_Fpga_TB_out_a2[7:0], FpgaPins_Fpga_TB_val1_a2[7:0], FpgaPins_Fpga_TB_val2_a2[7:0], FpgaPins_Fpga_TB_valid_a2[0:0]} = {FpgaPins_Fpga_CALC_mem_a2, FpgaPins_Fpga_CALC_op_a2, FpgaPins_Fpga_CALC_out_a2, FpgaPins_Fpga_CALC_val1_a2, FpgaPins_Fpga_CALC_val2_a2, FpgaPins_Fpga_CALC_valid_a2};
                  
                           
                     
                     
                  //_\end_source
               //_\end_source
            
               // Connect Tiny Tapeout outputs. Note that uio_ outputs are not available in the Tiny-Tapeout-3-based FPGA boards.
               assign uo_out = 8'b0;
               
               
            //_\end_source
   
      // LEDs.
      
   
      // 7-Segment
      //_\source /raw.githubusercontent.com/osfpga/VirtualFPGALab/a069f1e4e19adc829b53237b3e0b5d6763dc3194/tlvlib/fpgaincludes.tlv 395   // Instantiated from /raw.githubusercontent.com/osfpga/VirtualFPGALab/a069f1e4e19adc829b53237b3e0b5d6763dc3194/tlvlib/fpgaincludes.tlv, 346 as: m4+fpga_sseg.
         for (digit = 0; digit <= 0; digit++) begin : L1_Digit //_/digit
            
            for (leds = 0; leds <= 7; leds++) begin : L2_Leds //_/leds

               // For $viz_lit.
               logic L2_viz_lit_a0;

               assign L2_viz_lit_a0 = (! L0_sseg_digit_n_a0[digit]) && ! ((leds == 7) ? L0_sseg_decimal_point_n_a0 : L0_sseg_segment_n_a0[leds % 7]);
               
            end
         end
      //_\end_source
   
      // slideswitches
      //_\source /raw.githubusercontent.com/osfpga/VirtualFPGALab/a069f1e4e19adc829b53237b3e0b5d6763dc3194/tlvlib/fpgaincludes.tlv 454   // Instantiated from /raw.githubusercontent.com/osfpga/VirtualFPGALab/a069f1e4e19adc829b53237b3e0b5d6763dc3194/tlvlib/fpgaincludes.tlv, 349 as: m4+fpga_switch.
         for (switch = 0; switch <= 7; switch++) begin : L1_Switch //_/switch

            // For $viz_switch.
            logic L1_viz_switch_a0;

            assign L1_viz_switch_a0 = L0_slideswitch_a0[switch];
            
         end
      //_\end_source
   
      // pushbuttons
      
   //_\end_source
   // Label the switch inputs [0..7] (1..8 on the physical switch panel) (top-to-bottom).
   //_\source /raw.githubusercontent.com/osfpga/VirtualFPGALab/35e36bd144fddd75495d4cbc01c4fc50ac5bde6f/tlvlib/tinytapeoutlib.tlv 82   // Instantiated from top.tlv, 183 as: m5+tt_input_labels_viz(⌈"Value[0]", "Value[1]", "Value[2]", "Value[3]", "Op[0]", "Op[1]", "Op[2]", "="⌉)
      for (input_label = 0; input_label <= 7; input_label++) begin : L1_InputLabel //_/input_label
         
      end
   //_\end_source

//_\SV
endmodule


// Undefine macros defined by SandPiper.
`undef BOGUS_USE
